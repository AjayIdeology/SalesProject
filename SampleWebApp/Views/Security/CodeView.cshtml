@{
    ViewBag.Title = "CodeView";
}
@Html.Partial("SecuritySubMenu")
<h2>SQL security: An explanation of how I have handled SQL Security</h2>

<p>
    <strong>
        This is a summary of what I had to do to get Entity Framework (EF) to work with SQL Security.
    </strong>
</p>

<h4>Intro: A very quick introduction to SQL security</h4>
<p>
    SQL Server and SQL Azure come with a whole range of secuirty features. For normal EF Create, Read, Update, Delete (CRUD) accesses
    we are only really interested in <strong>Table</strong> and <strong>Column</strong> security. The security allows us to control
    the individual CRUD accesses to a table and for a column, just the Read and Update (you can't create or delete a column).
    The type of access can be set for each <strong>Database Login/User</strong>.
</p>
<p>
    Note that the the code for handling security, called GenericSecurity, is not open source. Therefore some of the code you will not be able to see.
    However the idea is fairly easy to understand. You will just have to implement some parts yourself. (I have to have something that others need!)
</p>

<h3>The steps to get SQL data security working</h3>
<p>
    Below I have detailed the design and implementation of the various parts I needed to do to get EF to work with SQL Security.
</p>
<h4>Part 1: Getting EF to pass different Database Logins to SQL Server</h4>
<p>
    This turned out to be elegantly simple. EF Code First uses DbContext to set up the connection and it is already possible
    to pass your own connection string to EF. I therefore created a new <code>SecureSampleWebAppDb</code> from my normal
    <code>SampleWebAppDb</code> and insert a method to create a new connection string,
    but with the right database login name and password (see part 4)
</p>
<p>
    You can see the code for
    <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/DataLayer/DataClasses/SecureSampleWebAppDb.cs" target="_blank">SecureSampleWebAppDb</a>
    on GitHub. I think you will admit that is simple.
</p>

<h4>Part 2: Getting services to use SecureSampleWebAppDb</h4>
<p>
    Again, this was very simple as GenericServices only works with a DbContext that has the interface <code>IGenericServicesDbContext</code>.
    By moving that interface from <code>SampleWebAppDb</code> and putting it on <code>SecureSampleWebAppDb</code> then ensures that all the
    services will use the DbContext that supports the SQL security.
</p>
<p>
    I should note that I kept SampleWebAppDb available as my design says that the business layer should be able to access the database
    with the highest access level that the Database is set up to give EF, i.e. we 'trust' the business layer.
    (See @Html.ActionLink("SQL Permissions", "ViewPermissions") for more explanation on how the DBA might set this up.).
</p>

<h4>Part 3: Handling sql security errors</h4>
<p>
    I made a number of changes to the. Most of these are kept in the non open-source library, but you can see parts in the 
    <a href="https://github.com/JonPSmith/GenericServices" target="_blank">GenericServices</a> library.
    The changes are:
</p>

<ul>
    <li>
        The creation of a extention method called <code>.RealiseManyWithChecking()</code> (sync and async) in the GenericSecurity module.
        This is added to add to the end of a list service
        <code>.GetAll()</code> call. This causes the SQL command to be executed and returns a <code>ISuccessOrErrors&lt;ICollection&lt;T&gt;&gt;</code>
        result. If the flag <code>.IsValid</code> is true then all is fine and the <code>.Result</code> properly holds the Collection.
        If <code>.IsValid</code> is false then <code>.Errors</code> contains the error messages and <code>.Result</code> holds an empty collection.
        <br />
        See <code>Index</code> action in
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Controllers/CoursesController.cs" target="_blank">CourseController</a>
        for an example of how this is used.
    </li>
    <li>
        The <code>DetailService</code> and <code>UpdateSetupService</code> (sync and Async) now return <code>ISuccessOrErrors&lt;T&gt;</code>
        The <code>.IsValid</code> flags works the same as above, but if it is false the <code>.Result</code> holds a new (empty) class T.
        <br />
        See <code>Details</code> action in
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Controllers/CoursesController.cs" target="_blank">CourseController</a>
        for an example of how this is used.
    </li>
    <li>
        These is also
        <a href="https://github.com/JonPSmith/GenericServices/blob/master/GenericServices/Core/SecurityHelper.cs" target="_blank">.RealiseSingleWithChecking()</a>
        (sync and async) extension in case it is needed by the user in a Dto.
        (this is the code used in <code>DetailService</code> and <code>UpdateSetupService</code>)
    </li>
    <li>
        There is a method in the GenericService configuration called <code>ServicesConfiguration.RealiseSingleExceptionMethod</code>.
        GenericSecurity places a method in the ServicesConfiguration which checks exceptions and returns an error message if it is a permission error.
        You can see this method being used in 
        <a href="https://github.com/JonPSmith/GenericServices/blob/master/GenericServices/Core/SecurityHelper.cs" target="_blank">RealiseSingleWithErrorChecking method</a>
    </li>
    <li>
        Finally GenericSecurity adds sql permission error codes to GenericService's <code>SqlErrorDict</code>. This means that if <code>.SaveChangesWithChecking()</code>
        has a permission exception it outputs a helpful error message.
    </li>
</ul>
<p>
    <strong>NOTE:</strong> All Sql security permission failures are, by default, logged as this often means that the user should not have access to this function.
</p>
<h4>Part 4: Building the connection string</h4>
<p>
    Building the connection string is simple as we just replace the UserID and Password in the connection string with the right ones
    - see part 5 for how we decide on the right username and password.
    The only complicated things were:
</p>
<ul>
    <li>Handling the different format of the UserID for Azure, but that is a simple string formatting job.</li>
    <li>Handling hosted SQL Server login names as they need a prefix. This is done in part 5, when the login name is loaded.</li>
</ul>
<p>
    This code is unfortunately not open source.
</p>

<h4>Part 5: Selecting the right database user name and password to send to SQL Server</h4>
<p>
    This is the trickly part, but was greatly helped by ASP.NET Identity 2.
    Below I have listed the various parts separately, with links to any relevant code:
</p>
<ol>
    <li>
        I decided to separate the ASP.NET user from the Database user.
        This is because there may be multiple users that need the same level of database access, e.g. in my example there may be multiple trainers.
    </li>
    <li>
        This meant I had to add two new parts to the ASP.NET user: their database login name and its password.
        These I held as claims under the new ASP.NET Identity Claims model.
    </li>
    <li>
        The
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Identity/SetupGenericSecurity.cs" target="_blank">SetupGenericSecurity</a>
        class which sets up the GenericSecurity module
    </li>
    <li>
        The method <code>GetDatabaseUserFromThread()</code> towwards the bottom of 
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Identity/SetupGenericSecurity.cs" target="_blank">SetupGenericSecurity</a>
        provides GenericSecurity with the current database user and password when it needs it. This is taken from the Thread.Principal
    </li>
    <li>
        For the demo I set an
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Identity/IdentityDbInitializer.cs" target="_blank">Initializer</a>
        on the accounts database which is run at startup.
        This checks/creates the various ASP.NET users in the accounts database from a xml file
        and sets up the database login name and its password claims.
        <br />
        NOTE: You would NOT load the users from a file in real life! You would have user management tools.
    </li>
    <li>
        For the demo I wanted to allow the user to swap between ASP.NET users from a dropdown list.
        This meant I had to store the ASP.NET password in the
        <a href="https://github.com/JonPSmith/SampleMvcWebApp/blob/master/SampleWebApp/Identity/IdentityModels.cs" target="_blank">IdentityModels</a>
        so I could use it to 'Login' automatically. Again, not to be used in real life applications.
    </li>
    <li>
        I chose to hold the database login name and its password unencrypted as a) the accounts database is hidden from the user and
        b) the claims are held in the encrypted identity cookie which has to be secure to protect the identity.
        <br />
        I don't think my current design is insecure, but for your application you may want to add encryption to make this more secure.
    </li>
</ol>

