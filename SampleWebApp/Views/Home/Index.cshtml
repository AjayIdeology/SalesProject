@{
    ViewBag.Title = "Index";
}

<h2>Welcome to the Sample MVC Web Application</h2>
<div>
    <p>
        This web site is designed to show a number of useful methods for building enterprise grade web applications using
        <a href="http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started">ASP.NET MVC5</a> and
        <a href="http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc">Entity Framework 6</a>.
        The code for this sample MVC web application, and the associated GenericServices Framework is an open source project by
        <a href="http://www.thereformedprogrammer.net/about-me/" target="_blank">Jon Smith</a> under the
        <a href="http://opensource.org/licenses/MIT" target="_blank">MIT licence</a>.
        <ul>
            <li>The Sample MVC Web App software is available on <a href="https://github.com/JonPSmith/SampleMvcWebApp" target="_blank">GitHub</a>.</li>
            <li>The GenericService Framework is available on <a href="https://github.com/JonPSmith/GenericServices" target="_blank">GitHub</a> and soon via NuGet (when the release is stable).</li>
        </ul>
        While you might not want to use the GenericFramewore hopefully these examples will suggest different ways of implementing features in an application.
    </p>
    <h3>The specific features in highlighted on this web site are:</h3>

    <h4>1. Simple, but robust database services</h4>
    <p>
        Database accesses are normally a big part of enterprise systems build with APS.NET MVC. However, my experience is that creating these services
        in a robust and comprehensive form can lead to a lot of repetative code that does the same thing, but for different data.
        My aim has been to produce a generic framework that handles most of the cases, and is easily extensible when special handling is required.
        Examples of there use on this web site are:
    </p>
    <ul>
        <li>See normal, synchronous access in the @Html.ActionLink("Posts", "Index", "Posts") Controller</li>
        <li>See new EF6 async access in the @Html.ActionLink("PostsAsync", "Index", "PostsAsync") Controller</li>
    </ul>

    <h4>2. Handling long running tasks</h4>
    <p>
        Having long running tasks on a web site without feedback is not what users expect. 
        My <a href="http://selectiveanalytics.com/" target="_blank">mathematic modelling applications</a> 
        have a lot of long running tasks so I have developed specific code for displaying progress messages and allowing the user to cancel a task etc.
        Examples on this web site are:
    </p>
    <ul>
        <li>A @Html.ActionLink("BBC Radio schedule searcher", "Radio4Search", "Action") shows an async task in action.</li>
        <li>Other examples of usage can be found on @Html.ActionLink("Action", "Index", "Action") page</li>
        <li>See <a href="#" target="_blank">insert blog link</a> for an explanation of this code.</li>
    </ul>
    
    <h4>3. Use of Dependency Injection</h4>

    <p>
        The GenericService framework is designed specifically to work with
        <a href="http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver" target="_blank">Dependency Injection</a> (DI).
        DI is used throughout this web site, but specific examples are:
    </p>
    <ul>
        <li>
            Inserting the required services into a controller by action parameter injection. <br />
            This is a powerful, but unusual usage and is explained in <a href="#" target="_blank">insert blog link</a>
        </li>
        <li>
            DI is also used for creating the GenericService etc.
            See <a href="#" target="_blank">insert blog link</a> for more information.
        </li>
    </ul>
    <p>
        Note that the SampleMvcWebApp uses <a href="https://github.com/autofac/Autofac/wiki/Getting-Started" target="_blank">AutoFac</a>
        dependency injection framework, but the framework allows you to replace AutoFac with your own favourite DI tool.
    </p>

    <div class="panel-group hidden" id="crud-accordion">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#crud-accordion" href="#crud-collapseOne">
                        User facing features...
                    </a>
                </h4>
            </div>
            <div id="crud-collapseOne" class="panel-collapse collapse in">
                <div class="panel-body">
                    <ul>
                        <li>Provides robust database controls in a multi-user environment.</li>
                        <li>Good, user-focused feedback on errors at any level in system.</li>
                        <li>Optional message to user on successful create, update or delete.</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#crud-accordion" href="#crud-collapseTwo">
                        Software features...
                    </a>
                </h4>
            </div>
            <div id="crud-collapseTwo" class="panel-collapse collapse">
                <div class="panel-body">
                    <ul>
                        <li>Easy to implement. Most of the code written for you.</li>
                        <li>
                            Ability to 'shape' data coming from the database via
                            <a title="Data Transfer Objects" data-toggle="tooltip" href="#">DTOs</a>
                            to make it more user friendly.
                        </li>
                        <li>Highly extensible with lots of 'overrid !!!!!!!!!!!!!!!!!!!!!!!! points.</li>
                        <li>Uses MVC Action method Dependency Injection to make Controller code simpler.</li>
                        <li>Commands for both standard, synchronous data access and the new async data access.</li>
                        <li><em>To come. <a href="http://sidewaffle.com/" target="_blank">SideWaffle</a> templates for Controllers and Views.</em></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#crud-accordion" href="#crud-collapseThree">
                        Developer support...
                    </a>
                </h4>
            </div>
            <div id="crud-collapseThree" class="panel-collapse collapse">
                <div class="panel-body">
                    <ul>
                        <li>Open source under MIT licence, i.e. business friendly.</li>
                        <li>
                            Examples on running web site and in code on GitHub.
                            <ul>
                                <li>See normal, synchronous access in the @Html.ActionLink("Posts", "Index", "Posts") Controller</li>
                                <li>See new EF6 async access in the @Html.ActionLink("PostsAsync", "Index", "PostsAsync") Controller</li>
                            </ul>
                        </li>
                        <li>Comprehensive Unit Tests.</li>
                        <li>
                            Blog posts about the code
                            <ul>
                                <li>Blogs to come!</li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>




</div>

