@{
    ViewBag.Title = "CodeView";
}
<h2>Introduction to GenericServices</h2>
<p>
    GenericServices is a .NET class library which helps a developer build a
    <a href="http://martinfowler.com/eaaCatalog/serviceLayer.html" target="_blank">service layer</a>,
    i.e. a layer that acts as a facard/adapter between your business/data service layers and your User Interface or HTTP service.

    It does this by providing standard database CRUD (Create, Read, Update and Delete) methods and a standard way of
    calling business methods, each with clear extension points.
    The aim is to cut out the standard boiler-plate code so the user only has to write the data or business specific code.
</p>
<p>
    Some ASP.NET MVC specific features which build on the GenericService are also included.
    For instance the best way to call GenericService commands in a Controller and handling long-running tasks.
</p>
<hr />
<h3>Summary of the features covered by this example web site</h3>

<h4>1. Simple, but robust database services</h4>
<p>
    Database accesses are normally a big part of enterprise systems build with APS.NET MVC. However, my experience is that creating these services
    in a robust and comprehensive form can lead to a lot of repetative code that does the same thing, but for different data.
    The aim of the GenericFramework framework is to handles all of the standard cases, and include extension points for when special handling is required.
    Examples of there use on this web site are:
</p>
<ul>
    <li>See normal, synchronous access using a <abbr title="Data Transfer Object">DTO</abbr> for shaping in the @Html.ActionLink("Posts", "Index", "Posts") Controller</li>
    <li>See new EF6 async access using a <abbr title="Data Transfer Object">DTO</abbr> for shaping in the @Html.ActionLink("PostsAsync", "Index", "PostsAsync") Controller</li>
    <li>See normal, synchronous access directly via data class in the @Html.ActionLink("Tags", "Index", "Tags") Controller</li>
    <li>See new EF6 async access directly via data class in the @Html.ActionLink("TagsAsync", "Index", "TagsAsync") Controller</li>
    <li>There is also a @Html.ActionLink("Blogs", "Index", "Blogs") page to demonstrate calling a business method.</li>
</ul>

<h4>2. Use of Dependency Injection</h4>

<p>
    <a href="http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver" target="_blank">Dependency Injection</a> (DI)
    makes it much easier to create GenericServices commands.
    While you can do this manually I find DI so useful I wouldn't build a project without it.
    Therefore DI is used throughout this web site, but specific examples are:
</p>
<ul>
    <li>
        Inserting the required services into a controller by action parameter injection. <br />
        This is a powerful, but unusual usage and is explained in the DI section on @Html.ActionLink("Code Explanation", "CodeView", "Posts") page.
    </li>
    <li>
        DI is also used for creating the GenericService etc.
        See the @Html.ActionLink("code explanation", "CodeView", "Posts") page for more information.
    </li>
</ul>
<p>
    Note that the SampleMvcWebApp uses <a href="https://github.com/autofac/Autofac/wiki/Getting-Started" target="_blank">AutoFac</a>
    dependency injection framework, but the framework allows you to replace AutoFac with your own favourite DI tool.
</p>

<h4>3. Handling long running tasks</h4>
<p>
    Having long running tasks on a web site without feedback is not what users expect.
    My <a href="http://selectiveanalytics.com/" target="_blank">mathematic modelling applications</a>
    have a lot of long running tasks so I have developed specific code for displaying progress messages and allowing the user to cancel a task etc.
    Examples on this web site are:
</p>
<ul>
    <li>A @Html.ActionLink("BBC Radio schedule searcher", "Radio4Search", "Action") shows an async task in action.</li>
    <li>Other examples of usage can be found on @Html.ActionLink("Action", "Index", "Action") page</li>
    @*<li>See <a href="#" target="_blank">insert blog link</a> for an explanation of this code.</li>*@
</ul>



